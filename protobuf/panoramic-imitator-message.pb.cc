// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: panoramic-imitator-message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "panoramic-imitator-message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace panoramicImitator {
class Message_AnglesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Message_Angles> {};
Message_AnglesDefaultTypeInternal _Message_Angles_default_instance_;
class Message_FrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Message_Frame> {};
Message_FrameDefaultTypeInternal _Message_Frame_default_instance_;
class MessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Message> {};
MessageDefaultTypeInternal _Message_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_panoramic_2dimitator_2dmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_panoramic_2dimitator_2dmessage_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Angles, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Angles, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Angles, horangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Angles, vertangle_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Frame, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Frame, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Frame, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message_Frame, width_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, angles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, frame_),
    0,
    1,
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(Message_Angles)},
  { 8, 14, sizeof(Message_Frame)},
  { 16, 22, sizeof(Message)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Message_Angles_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Message_Frame_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Message_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_panoramic_2dimitator_2dmessage_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "panoramic-imitator-message.proto", schemas, file_default_instances, protobuf_Offsets_panoramic_2dimitator_2dmessage_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void protobuf_ShutdownFile_panoramic_2dimitator_2dmessage_2eproto() {
  _Message_Angles_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Message_Frame_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Message_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void protobuf_InitDefaults_panoramic_2dimitator_2dmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Message_Angles_default_instance_.DefaultConstruct();
  _Message_Frame_default_instance_.DefaultConstruct();
  _Message_default_instance_.DefaultConstruct();
  _Message_default_instance_.get_mutable()->angles_ = const_cast< ::panoramicImitator::Message_Angles*>(
      ::panoramicImitator::Message_Angles::internal_default_instance());
  _Message_default_instance_.get_mutable()->frame_ = const_cast< ::panoramicImitator::Message_Frame*>(
      ::panoramicImitator::Message_Frame::internal_default_instance());
}

void protobuf_InitDefaults_panoramic_2dimitator_2dmessage_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_panoramic_2dimitator_2dmessage_2eproto_impl);
}
void protobuf_AddDesc_panoramic_2dimitator_2dmessage_2eproto_impl() {
  protobuf_InitDefaults_panoramic_2dimitator_2dmessage_2eproto();
  static const char descriptor[] = {
      "\n panoramic-imitator-message.proto\022\021pano"
      "ramicImitator\"\304\001\n\007Message\0221\n\006angles\030\001 \002("
      "\0132!.panoramicImitator.Message.Angles\022/\n\005"
      "frame\030\002 \002(\0132 .panoramicImitator.Message."
      "Frame\032-\n\006Angles\022\020\n\010horAngle\030\001 \002(\001\022\021\n\tver"
      "tAngle\030\002 \002(\001\032&\n\005Frame\022\016\n\006height\030\001 \002(\005\022\r\n"
      "\005width\030\002 \002(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 252);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "panoramic-imitator-message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_panoramic_2dimitator_2dmessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_panoramic_2dimitator_2dmessage_2eproto_once_);
void protobuf_AddDesc_panoramic_2dimitator_2dmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_panoramic_2dimitator_2dmessage_2eproto_once_,
                 &protobuf_AddDesc_panoramic_2dimitator_2dmessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_panoramic_2dimitator_2dmessage_2eproto {
  StaticDescriptorInitializer_panoramic_2dimitator_2dmessage_2eproto() {
    protobuf_AddDesc_panoramic_2dimitator_2dmessage_2eproto();
  }
} static_descriptor_initializer_panoramic_2dimitator_2dmessage_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_Angles::kHorAngleFieldNumber;
const int Message_Angles::kVertAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_Angles::Message_Angles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_panoramic_2dimitator_2dmessage_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:panoramicImitator.Message.Angles)
}
Message_Angles::Message_Angles(const Message_Angles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&horangle_, &from.horangle_,
    reinterpret_cast<char*>(&vertangle_) -
    reinterpret_cast<char*>(&horangle_) + sizeof(vertangle_));
  // @@protoc_insertion_point(copy_constructor:panoramicImitator.Message.Angles)
}

void Message_Angles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&horangle_, 0, reinterpret_cast<char*>(&vertangle_) -
    reinterpret_cast<char*>(&horangle_) + sizeof(vertangle_));
}

Message_Angles::~Message_Angles() {
  // @@protoc_insertion_point(destructor:panoramicImitator.Message.Angles)
  SharedDtor();
}

void Message_Angles::SharedDtor() {
}

void Message_Angles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Angles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const Message_Angles& Message_Angles::default_instance() {
  protobuf_InitDefaults_panoramic_2dimitator_2dmessage_2eproto();
  return *internal_default_instance();
}

Message_Angles* Message_Angles::New(::google::protobuf::Arena* arena) const {
  Message_Angles* n = new Message_Angles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_Angles::Clear() {
// @@protoc_insertion_point(message_clear_start:panoramicImitator.Message.Angles)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&horangle_, 0, reinterpret_cast<char*>(&vertangle_) -
      reinterpret_cast<char*>(&horangle_) + sizeof(vertangle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Message_Angles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panoramicImitator.Message.Angles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double horAngle = 1;
      case 1: {
        if (tag == 9u) {
          set_has_horangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double vertAngle = 2;
      case 2: {
        if (tag == 17u) {
          set_has_vertangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panoramicImitator.Message.Angles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panoramicImitator.Message.Angles)
  return false;
#undef DO_
}

void Message_Angles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panoramicImitator.Message.Angles)
  // required double horAngle = 1;
  if (has_horangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->horangle(), output);
  }

  // required double vertAngle = 2;
  if (has_vertangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->vertangle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panoramicImitator.Message.Angles)
}

::google::protobuf::uint8* Message_Angles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:panoramicImitator.Message.Angles)
  // required double horAngle = 1;
  if (has_horangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->horangle(), target);
  }

  // required double vertAngle = 2;
  if (has_vertangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->vertangle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panoramicImitator.Message.Angles)
  return target;
}

size_t Message_Angles::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:panoramicImitator.Message.Angles)
  size_t total_size = 0;

  if (has_horangle()) {
    // required double horAngle = 1;
    total_size += 1 + 8;
  }

  if (has_vertangle()) {
    // required double vertAngle = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Message_Angles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:panoramicImitator.Message.Angles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double horAngle = 1;
    total_size += 1 + 8;

    // required double vertAngle = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Angles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:panoramicImitator.Message.Angles)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_Angles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_Angles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:panoramicImitator.Message.Angles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:panoramicImitator.Message.Angles)
    MergeFrom(*source);
  }
}

void Message_Angles::MergeFrom(const Message_Angles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:panoramicImitator.Message.Angles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_horangle()) {
      set_horangle(from.horangle());
    }
    if (from.has_vertangle()) {
      set_vertangle(from.vertangle());
    }
  }
}

void Message_Angles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:panoramicImitator.Message.Angles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Angles::CopyFrom(const Message_Angles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:panoramicImitator.Message.Angles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Angles::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Message_Angles::Swap(Message_Angles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_Angles::InternalSwap(Message_Angles* other) {
  std::swap(horangle_, other->horangle_);
  std::swap(vertangle_, other->vertangle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_Angles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message_Angles

// required double horAngle = 1;
bool Message_Angles::has_horangle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message_Angles::set_has_horangle() {
  _has_bits_[0] |= 0x00000001u;
}
void Message_Angles::clear_has_horangle() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message_Angles::clear_horangle() {
  horangle_ = 0;
  clear_has_horangle();
}
double Message_Angles::horangle() const {
  // @@protoc_insertion_point(field_get:panoramicImitator.Message.Angles.horAngle)
  return horangle_;
}
void Message_Angles::set_horangle(double value) {
  set_has_horangle();
  horangle_ = value;
  // @@protoc_insertion_point(field_set:panoramicImitator.Message.Angles.horAngle)
}

// required double vertAngle = 2;
bool Message_Angles::has_vertangle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message_Angles::set_has_vertangle() {
  _has_bits_[0] |= 0x00000002u;
}
void Message_Angles::clear_has_vertangle() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message_Angles::clear_vertangle() {
  vertangle_ = 0;
  clear_has_vertangle();
}
double Message_Angles::vertangle() const {
  // @@protoc_insertion_point(field_get:panoramicImitator.Message.Angles.vertAngle)
  return vertangle_;
}
void Message_Angles::set_vertangle(double value) {
  set_has_vertangle();
  vertangle_ = value;
  // @@protoc_insertion_point(field_set:panoramicImitator.Message.Angles.vertAngle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message_Frame::kHeightFieldNumber;
const int Message_Frame::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message_Frame::Message_Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_panoramic_2dimitator_2dmessage_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:panoramicImitator.Message.Frame)
}
Message_Frame::Message_Frame(const Message_Frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&height_) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:panoramicImitator.Message.Frame)
}

void Message_Frame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&height_, 0, reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&height_) + sizeof(width_));
}

Message_Frame::~Message_Frame() {
  // @@protoc_insertion_point(destructor:panoramicImitator.Message.Frame)
  SharedDtor();
}

void Message_Frame::SharedDtor() {
}

void Message_Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message_Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const Message_Frame& Message_Frame::default_instance() {
  protobuf_InitDefaults_panoramic_2dimitator_2dmessage_2eproto();
  return *internal_default_instance();
}

Message_Frame* Message_Frame::New(::google::protobuf::Arena* arena) const {
  Message_Frame* n = new Message_Frame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message_Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:panoramicImitator.Message.Frame)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&height_, 0, reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Message_Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panoramicImitator.Message.Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 height = 1;
      case 1: {
        if (tag == 8u) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 2;
      case 2: {
        if (tag == 16u) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panoramicImitator.Message.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panoramicImitator.Message.Frame)
  return false;
#undef DO_
}

void Message_Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panoramicImitator.Message.Frame)
  // required int32 height = 1;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // required int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panoramicImitator.Message.Frame)
}

::google::protobuf::uint8* Message_Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:panoramicImitator.Message.Frame)
  // required int32 height = 1;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // required int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panoramicImitator.Message.Frame)
  return target;
}

size_t Message_Frame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:panoramicImitator.Message.Frame)
  size_t total_size = 0;

  if (has_height()) {
    // required int32 height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  if (has_width()) {
    // required int32 width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  return total_size;
}
size_t Message_Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:panoramicImitator.Message.Frame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 height = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

    // required int32 width = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message_Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:panoramicImitator.Message.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message_Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:panoramicImitator.Message.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:panoramicImitator.Message.Frame)
    MergeFrom(*source);
  }
}

void Message_Frame::MergeFrom(const Message_Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:panoramicImitator.Message.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
}

void Message_Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:panoramicImitator.Message.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_Frame::CopyFrom(const Message_Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:panoramicImitator.Message.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Frame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Message_Frame::Swap(Message_Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message_Frame::InternalSwap(Message_Frame* other) {
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message_Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message_Frame

// required int32 height = 1;
bool Message_Frame::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message_Frame::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
void Message_Frame::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message_Frame::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 Message_Frame::height() const {
  // @@protoc_insertion_point(field_get:panoramicImitator.Message.Frame.height)
  return height_;
}
void Message_Frame::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:panoramicImitator.Message.Frame.height)
}

// required int32 width = 2;
bool Message_Frame::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message_Frame::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void Message_Frame::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message_Frame::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 Message_Frame::width() const {
  // @@protoc_insertion_point(field_get:panoramicImitator.Message.Frame.width)
  return width_;
}
void Message_Frame::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:panoramicImitator.Message.Frame.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kAnglesFieldNumber;
const int Message::kFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_panoramic_2dimitator_2dmessage_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:panoramicImitator.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angles()) {
    angles_ = new ::panoramicImitator::Message_Angles(*from.angles_);
  } else {
    angles_ = NULL;
  }
  if (from.has_frame()) {
    frame_ = new ::panoramicImitator::Message_Frame(*from.frame_);
  } else {
    frame_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:panoramicImitator.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&angles_, 0, reinterpret_cast<char*>(&frame_) -
    reinterpret_cast<char*>(&angles_) + sizeof(frame_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:panoramicImitator.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != internal_default_instance()) {
    delete angles_;
  }
  if (this != internal_default_instance()) {
    delete frame_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2].descriptor;
}

const Message& Message::default_instance() {
  protobuf_InitDefaults_panoramic_2dimitator_2dmessage_2eproto();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:panoramicImitator.Message)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_angles()) {
      GOOGLE_DCHECK(angles_ != NULL);
      angles_->::panoramicImitator::Message_Angles::Clear();
    }
    if (has_frame()) {
      GOOGLE_DCHECK(frame_ != NULL);
      frame_->::panoramicImitator::Message_Frame::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:panoramicImitator.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .panoramicImitator.Message.Angles angles = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .panoramicImitator.Message.Frame frame = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:panoramicImitator.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:panoramicImitator.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:panoramicImitator.Message)
  // required .panoramicImitator.Message.Angles angles = 1;
  if (has_angles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->angles_, output);
  }

  // required .panoramicImitator.Message.Frame frame = 2;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->frame_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:panoramicImitator.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:panoramicImitator.Message)
  // required .panoramicImitator.Message.Angles angles = 1;
  if (has_angles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->angles_, false, target);
  }

  // required .panoramicImitator.Message.Frame frame = 2;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->frame_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:panoramicImitator.Message)
  return target;
}

size_t Message::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:panoramicImitator.Message)
  size_t total_size = 0;

  if (has_angles()) {
    // required .panoramicImitator.Message.Angles angles = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angles_);
  }

  if (has_frame()) {
    // required .panoramicImitator.Message.Frame frame = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frame_);
  }

  return total_size;
}
size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:panoramicImitator.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .panoramicImitator.Message.Angles angles = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angles_);

    // required .panoramicImitator.Message.Frame frame = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frame_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:panoramicImitator.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:panoramicImitator.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:panoramicImitator.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:panoramicImitator.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_angles()) {
      mutable_angles()->::panoramicImitator::Message_Angles::MergeFrom(from.angles());
    }
    if (from.has_frame()) {
      mutable_frame()->::panoramicImitator::Message_Frame::MergeFrom(from.frame());
    }
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:panoramicImitator.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:panoramicImitator.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_angles()) {
    if (!this->angles_->IsInitialized()) return false;
  }
  if (has_frame()) {
    if (!this->frame_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(angles_, other->angles_);
  std::swap(frame_, other->frame_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// required .panoramicImitator.Message.Angles angles = 1;
bool Message::has_angles() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_angles() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_angles() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_angles() {
  if (angles_ != NULL) angles_->::panoramicImitator::Message_Angles::Clear();
  clear_has_angles();
}
const ::panoramicImitator::Message_Angles& Message::angles() const {
  // @@protoc_insertion_point(field_get:panoramicImitator.Message.angles)
  return angles_ != NULL ? *angles_
                         : *::panoramicImitator::Message_Angles::internal_default_instance();
}
::panoramicImitator::Message_Angles* Message::mutable_angles() {
  set_has_angles();
  if (angles_ == NULL) {
    angles_ = new ::panoramicImitator::Message_Angles;
  }
  // @@protoc_insertion_point(field_mutable:panoramicImitator.Message.angles)
  return angles_;
}
::panoramicImitator::Message_Angles* Message::release_angles() {
  // @@protoc_insertion_point(field_release:panoramicImitator.Message.angles)
  clear_has_angles();
  ::panoramicImitator::Message_Angles* temp = angles_;
  angles_ = NULL;
  return temp;
}
void Message::set_allocated_angles(::panoramicImitator::Message_Angles* angles) {
  delete angles_;
  angles_ = angles;
  if (angles) {
    set_has_angles();
  } else {
    clear_has_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:panoramicImitator.Message.angles)
}

// required .panoramicImitator.Message.Frame frame = 2;
bool Message::has_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_frame() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_frame() {
  if (frame_ != NULL) frame_->::panoramicImitator::Message_Frame::Clear();
  clear_has_frame();
}
const ::panoramicImitator::Message_Frame& Message::frame() const {
  // @@protoc_insertion_point(field_get:panoramicImitator.Message.frame)
  return frame_ != NULL ? *frame_
                         : *::panoramicImitator::Message_Frame::internal_default_instance();
}
::panoramicImitator::Message_Frame* Message::mutable_frame() {
  set_has_frame();
  if (frame_ == NULL) {
    frame_ = new ::panoramicImitator::Message_Frame;
  }
  // @@protoc_insertion_point(field_mutable:panoramicImitator.Message.frame)
  return frame_;
}
::panoramicImitator::Message_Frame* Message::release_frame() {
  // @@protoc_insertion_point(field_release:panoramicImitator.Message.frame)
  clear_has_frame();
  ::panoramicImitator::Message_Frame* temp = frame_;
  frame_ = NULL;
  return temp;
}
void Message::set_allocated_frame(::panoramicImitator::Message_Frame* frame) {
  delete frame_;
  frame_ = frame;
  if (frame) {
    set_has_frame();
  } else {
    clear_has_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:panoramicImitator.Message.frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace panoramicImitator

// @@protoc_insertion_point(global_scope)
